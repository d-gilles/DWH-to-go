-- This file is used to setup not just create a database $SNOWFLAKE_DATABASE_NAME
-- but also creates a schema called ECOMMERCE 
-- and copies some test data from s3 Bucket to a table called S3TABLE.
-- The execution of this query is idempotent.
CREATE DATABASE $SNOWFLAKE_DATABASE_NAME;
CREATE SCHEMA $SNOWFLAKE_DATABASE_NAME.ECOMMERCE;

USE DATABASE $SNOWFLAKE_DATABASE_NAME;

CREATE OR REPLACE FILE FORMAT $SNOWFLAKE_DATABASE_NAME.ECOMMERCE.ECOMMERCEPARQUETFORMAT
TYPE = PARQUET
USE_LOGICAL_TYPE = TRUE;

-- create the s3 stage

create or replace stage ECOMMERCE.s3stage
  url = 's3://${PROJECT_NAME}-i${ITERATION}-data-lake/staging/'
  file_format = $SNOWFLAKE_DATABASE_NAME.ECOMMERCE.ECOMMERCEPARQUETFORMAT
  storage_integration = s3_storage_integration;

-- create the new internal table
create or replace TABLE $SNOWFLAKE_DATABASE_NAME.ECOMMERCE.S3TABLE (
	INVOICENO VARCHAR(38),
	STOCKCODE VARCHAR(38),
	DESCRIPTION VARCHAR(60),
	QUANTITY NUMBER(38,0),
	INVOICEDATE TIMESTAMP,
	UNITPRICE NUMBER(38,0),
	CUSTOMERID VARCHAR(10),
	COUNTRY VARCHAR(20)
    );
use warehouse $SNOWFLAKE_WAREHOUSE;
COPY INTO $SNOWFLAKE_DATABASE_NAME.ECOMMERCE.S3TABLE
FROM @ECOMMERCE.s3stage
FILE_FORMAT = (FORMAT_NAME = $SNOWFLAKE_DATABASE_NAME.ECOMMERCE.ECOMMERCEPARQUETFORMAT)
MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE
ON_ERROR = 'CONTINUE';

SELECT * FROM $SNOWFLAKE_DATABASE_NAME.ECOMMERCE.S3TABLE LIMIT 10;